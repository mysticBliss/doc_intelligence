# DEPRECATED: This factory is no longer in use.
# Please use app.processing.factory.ProcessorFactory instead.

import structlog
from typing import List, Dict, Any, Type
from app.services.processors.base import DocumentProcessor
from app.services.processors.ocr_processor import OcrProcessor
from app.services.processors.vlm_processor import VlmProcessor
from app.services.processors.enhanced_pdf_processor import EnhancedPdfProcessor
from app.services.processors.pdf_image_extraction_processor import (PDFImageExtractionProcessor)
from app.services.processors.image_preprocessing_processor import (ImagePreprocessingProcessor)
    
# A registry of all available processors
PROCESSOR_REGISTRY: Dict[str, Type[DocumentProcessor]] = {
    "ocr_processor": OcrProcessor,
    "vlm_processor": VlmProcessor,
    "enhanced_pdf_processor": EnhancedPdfProcessor,
    "pdf_image_extraction_processor": PDFImageExtractionProcessor,
    "image_preprocessing_processor": ImagePreprocessingProcessor,
}

def create_processors(
    processor_names: List[str], *, logger: structlog.stdlib.BoundLogger
) -> List[DocumentProcessor]:
    """Creates a list of processor instances from a list of processor names."""
    processors: List[DocumentProcessor] = []
    for name in processor_names:
        processor_class = PROCESSOR_REGISTRY.get(name)
        if processor_class:
            # The logger is not passed here because it will be passed during the process call
            processors.append(processor_class())
        else:
            logger.warning("Unknown processor specified", processor_name=name)
    return processors